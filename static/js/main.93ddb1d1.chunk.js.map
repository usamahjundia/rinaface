{"version":3,"sources":["logo.svg","Tile.js","BoardRow.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Tile","active","updateTile","row","col","onClick","e","className","BoardRow","rownum","map","a","j","Board","matrix","i","Array","fill","useState","tile","setTile","r","c","tileCopy","arr","slice","t","App","console","log","window","outerHeight","outerWidth","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oKAAAA,EAAOC,QAAU,IAA0B,kC,gLCG5B,SAASC,EAAT,GAAiD,IAAjCC,EAAgC,EAAhCA,OAAQC,EAAwB,EAAxBA,WAAYC,EAAY,EAAZA,IAAKC,EAAO,EAAPA,IAMpD,OACI,yBAAKC,QALT,SAA0BC,GACtBJ,EAAWC,EAAKC,IAIgBG,UAAS,eAAUN,EAAS,SAAW,e,YCNhE,SAASO,EAAT,GAAgD,IAA5BC,EAA2B,EAA3BA,OAAQN,EAAmB,EAAnBA,IAAKD,EAAc,EAAdA,WAC5C,OACI,yBAAKK,UAAU,YACVJ,EAAIO,KAAI,SAACC,EAAGC,GACV,OAAO,kBAAC,EAAD,CAAMX,OAAQU,EAAGT,WAAYA,EAAYC,IAAKM,EAAQL,IAAKQ,QCHlE,SAASC,EAAT,GAEX,IAFyC,IAAbV,EAAY,EAAZA,IAAKC,EAAO,EAAPA,IAC7BU,EAAS,GACJC,EAAI,EAAGA,EAAIZ,EAAKY,IACrBD,EAAOC,GAAM,IAAIC,MAAMZ,GAAMa,MAAK,GAHE,MAKhBC,mBAASJ,GALO,mBAKjCK,EALiC,KAK3BC,EAL2B,KAOxC,SAASlB,EAAWmB,EAAGC,GACnB,IAAIC,EAAWJ,EAAKT,KAAI,SAAAc,GAAG,OAAIA,EAAIC,WACnCF,EAASF,GAAGC,IAAMC,EAASF,GAAGC,GAC9BF,EAAQG,GAGZ,OACI,yBAAKhB,UAAU,SACX,yBAAKA,UAAU,eACVY,EAAKT,KAAI,SAACgB,EAAGX,GACV,OAAO,kBAAC,EAAD,CAAUN,OAAQM,EAAGZ,IAAKuB,EAAGxB,WAAYA,SCRrDyB,MATf,WAEE,OADAC,QAAQC,IAAIC,OAAOC,YAAYD,OAAOE,YAEpC,yBAAKzB,UAAU,OACb,kBAAC,EAAD,CAAOJ,IAAK,GAAIC,IAAK,OCGP6B,QACW,cAA7BH,OAAOI,SAASC,UAEe,UAA7BL,OAAOI,SAASC,UAEhBL,OAAOI,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.93ddb1d1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\"\nimport \"./Tile.css\"\n\nexport default function Tile({ active, updateTile, row, col }) {\n\n    function handleupdateTile(e) {\n        updateTile(row, col);\n    }\n\n    return (\n        <div onClick={handleupdateTile} className={`Tile ${active ? \"active\" : \"nonactive\"}`}>\n\n        </div>\n    );\n}","import React from \"react\"\nimport \"./BoardRow.css\"\nimport Tile from \"./Tile\"\n\nexport default function BoardRow({ rownum, row, updateTile }) {\n    return (\n        <div className=\"BoardRow\">\n            {row.map((a, j) => {\n               return <Tile active={a} updateTile={updateTile} row={rownum} col={j} />\n            })}\n        </div>\n    );\n}","import React, { useState } from \"react\"\nimport Tile from \"./Tile\"\nimport \"./Board.css\"\nimport BoardRow from \"./BoardRow\"\n\nexport default function Board({ row, col }) {\n    let matrix = [];\n    for (let i = 0; i < row; i++) {\n        matrix[i] = (new Array(col)).fill(false);\n    }\n    const [tile, setTile] = useState(matrix);\n\n    function updateTile(r, c) {\n        let tileCopy = tile.map(arr => arr.slice());\n        tileCopy[r][c] = !tileCopy[r][c];\n        setTile(tileCopy);\n    }\n\n    return (\n        <div className=\"Board\">\n            <div className=\"Board-tiles\">\n                {tile.map((t, i) => {\n                    return <BoardRow rownum={i} row={t} updateTile={updateTile} />\n                })}\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Board from \"./Board\"\n\nfunction App() {\n  console.log(window.outerHeight,window.outerWidth)\n  return (\n    <div className=\"App\">\n      <Board row={18} col={32}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}