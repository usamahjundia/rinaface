{"version":3,"sources":["Tile.js","BoardRow.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Tile","rownum","colnum","active","updateTile","onClick","e","className","BoardRow","row","map","val","happyFace","3","4","5","6","7","9","10","11","12","13","14","initFace","face","emptyMatrix","matrix","i","Array","fill","initEmptyBoard","undefined","j","Board","useState","tile","setTile","col","tileCopy","slice","rowid","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d3c96194.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"./Tile.css\"\r\n\r\nexport default function Tile({rownum,colnum,active,updateTile}){\r\n    \r\n    function handleUpdateTile(e){\r\n        updateTile(rownum,colnum);\r\n    }\r\n\r\n    return (\r\n        <div onClick={handleUpdateTile} className={`Tile ${active ? \"active\" : \"nonactive\"}`}>\r\n\r\n        </div>\r\n    );\r\n}","import React from \"react\"\r\nimport \"./BoardRow.css\"\r\nimport Tile from \"./Tile\"\r\n\r\nexport default function BoardRow({rownum,row,updateTile}){\r\n    return (\r\n        <div className=\"BoardRow\">\r\n            {row.map((val,colnum)=>{\r\n                return <Tile rownum={rownum} colnum={colnum} active={val} updateTile={updateTile} />\r\n            })}\r\n        </div>\r\n    );\r\n}","import React, {useState} from \"react\"\r\nimport \"./Board.css\"\r\nimport BoardRow from \"./BoardRow\"\r\n\r\nfunction initEmptyBoard(){\r\n    let matrix = [];\r\n    for(let i=0;i<18;i++){\r\n        matrix[i] = (new Array(32)).fill(false);\r\n    }\r\n    return matrix;\r\n}\r\n\r\nlet happyFace = {\r\n    3 : [7,8,23,24],\r\n    4 : [9,10,21,22],\r\n    5 : [11,20],\r\n    6 : [9,10,21,22],\r\n    7 : [7,8,23,24],\r\n    9 : [7,9,22,24],\r\n    10 : [12,13,14,15,16,17,18,19],\r\n    11 : [12,19],\r\n    12 : [13,18],\r\n    13 : [14,17],\r\n    14 : [15,16]\r\n}\r\n\r\nfunction initFace(face){\r\n    let emptyMatrix = initEmptyBoard();\r\n    for(let i = 0;i<18;i++){\r\n        if (face[i] === undefined) continue;\r\n        for(let j of face[i]){\r\n            emptyMatrix[i][j] = true;\r\n        }\r\n    }\r\n    return emptyMatrix;\r\n}\r\n\r\nexport default function Board(){\r\n    const [tile, setTile] = useState(initFace(happyFace));\r\n\r\n    function updateTile(row,col){\r\n        let tileCopy = [];\r\n        for(let i=0;i<18;i++){\r\n            tileCopy[i] = tile[i].slice();\r\n        }\r\n        tileCopy[row][col] = !tileCopy[row][col];\r\n        setTile(tileCopy);\r\n    }\r\n\r\n    return (\r\n        <div className=\"Board\">\r\n            <div className=\"Board-tiles\">\r\n            {tile.map((row,rowid)=>{\r\n                return <BoardRow rownum={rowid} row={row} updateTile={updateTile} />\r\n            })}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}","import React from 'react';\n// import logo from './logo.svg';\n// import {Route,Switch,NavLink} from \"react-router-dom\"\nimport './App.css';\nimport Board from \"./Board\"\n// import Home from \"./Home\"\n// import About from \"./About\"\n// import Contact from \"./Contact\"\n\n// never use a for links, use link component\n// use function instead of the class when you need prop\n// for a route\n// when using function, use render if you dont want\n// to re instantiate comp\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Board/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\"\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}